/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ResetPasswordRouteImport } from './routes/reset-password'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ListRouteImport } from './routes/list'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminUsersRouteImport } from './routes/admin/users'

const ResetPasswordRoute = ResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ListRoute = ListRouteImport.update({
  id: '/list',
  path: '/list',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/admin/users',
  path: '/admin/users',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/list': typeof ListRoute
  '/login': typeof LoginRoute
  '/reset-password': typeof ResetPasswordRoute
  '/admin/users': typeof AdminUsersRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/list': typeof ListRoute
  '/login': typeof LoginRoute
  '/reset-password': typeof ResetPasswordRoute
  '/admin/users': typeof AdminUsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/list': typeof ListRoute
  '/login': typeof LoginRoute
  '/reset-password': typeof ResetPasswordRoute
  '/admin/users': typeof AdminUsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/list' | '/login' | '/reset-password' | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/list' | '/login' | '/reset-password' | '/admin/users'
  id: '__root__' | '/' | '/list' | '/login' | '/reset-password' | '/admin/users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ListRoute: typeof ListRoute
  LoginRoute: typeof LoginRoute
  ResetPasswordRoute: typeof ResetPasswordRoute
  AdminUsersRoute: typeof AdminUsersRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/list': {
      id: '/list'
      path: '/list'
      fullPath: '/list'
      preLoaderRoute: typeof ListRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ListRoute: ListRoute,
  LoginRoute: LoginRoute,
  ResetPasswordRoute: ResetPasswordRoute,
  AdminUsersRoute: AdminUsersRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
